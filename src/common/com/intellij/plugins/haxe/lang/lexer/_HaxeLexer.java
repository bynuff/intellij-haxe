/* The following code was generated by JFlex 1.4.3 on 4/14/17 4:27 PM */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import com.intellij.plugins.haxe.lang.lexer.HaxeConditionalCompilationLexerSupport;
import com.intellij.plugins.haxe.util.HaxeDebugLogger;
import com.intellij.openapi.project.Project;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/14/17 4:27 PM from the specification file
 * <tt>/sandbox/github/HaxeFoundation/intellij-haxe/src/common/com/intellij/plugins/haxe/lang/lexer/haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int APOS_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int CC_APOS_STRING = 14;
  public static final int COMPILER_CONDITIONAL = 10;
  public static final int LONG_TEMPLATE_ENTRY = 8;
  public static final int CC_BLOCK = 16;
  public static final int YYINITIAL = 0;
  public static final int QUO_STRING = 2;
  public static final int CC_STRING = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\104\1\0\1\1\1\6\22\0\1\61\1\75\1\27"+
    "\1\32\1\7\1\103\1\100\1\30\1\66\1\67\1\13\1\25\1\71"+
    "\1\72\1\26\1\12\1\17\7\16\2\15\1\11\1\70\1\101\1\74"+
    "\1\73\1\76\1\10\1\14\1\62\2\14\1\24\1\14\21\2\1\21"+
    "\2\2\1\64\1\5\1\65\1\102\1\3\1\0\1\44\1\43\1\53"+
    "\1\46\1\36\1\47\1\54\1\56\1\34\1\2\1\45\1\33\1\23"+
    "\1\35\1\40\1\52\1\63\1\37\1\55\1\51\1\50\1\57\1\42"+
    "\1\20\1\60\1\2\1\31\1\77\1\41\1\22\53\0\1\2\12\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u01ca\2\4\0"+
    "\14\2\16\0\5\2\7\0\1\2\1\0\1\2\201\0\5\2\1\0"+
    "\2\2\2\0\4\2\10\0\1\2\1\0\3\2\1\0\1\2\1\0"+
    "\24\2\1\0\123\2\1\0\213\2\10\0\236\2\11\0\46\2\2\0"+
    "\1\2\7\0\47\2\110\0\33\2\5\0\3\2\55\0\53\2\25\0"+
    "\12\4\4\0\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0"+
    "\2\2\12\4\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0"+
    "\131\2\13\0\1\2\16\0\12\4\41\2\11\0\2\2\4\0\1\2"+
    "\5\0\26\2\4\0\1\2\11\0\1\2\3\0\1\2\27\0\31\2"+
    "\253\0\66\2\3\0\1\2\22\0\1\2\7\0\12\2\4\0\12\4"+
    "\1\0\7\2\1\0\7\2\5\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0\1\2"+
    "\15\0\2\2\1\0\3\2\4\0\12\4\2\2\23\0\6\2\4\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0"+
    "\2\2\37\0\4\2\1\0\1\2\7\0\12\4\2\0\3\2\20\0"+
    "\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\3\0\1\2\22\0\1\2\17\0\2\2\4\0\12\4\25\0"+
    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\3\0\1\2\36\0\2\2\1\0\3\2\4\0\12\4\1\0"+
    "\1\2\21\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0"+
    "\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0"+
    "\14\2\26\0\1\2\25\0\12\4\25\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\3\0\1\2\32\0\2\2\6\0"+
    "\2\2\4\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\3\0\1\2\40\0\1\2\1\0\2\2\4\0"+
    "\12\4\1\0\2\2\22\0\10\2\1\0\3\2\1\0\51\2\2\0"+
    "\1\2\20\0\1\2\21\0\2\2\4\0\12\4\12\0\6\2\5\0"+
    "\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0\7\2\72\0"+
    "\60\2\1\0\2\2\14\0\7\2\11\0\12\4\47\0\2\2\1\0"+
    "\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0"+
    "\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0"+
    "\4\2\1\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0"+
    "\12\4\2\0\2\2\42\0\1\2\37\0\12\4\26\0\10\2\1\0"+
    "\44\2\33\0\5\2\163\0\53\2\24\0\1\2\12\4\6\0\6\2"+
    "\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2"+
    "\14\0\1\2\1\0\12\4\6\0\46\2\12\0\53\2\1\0\1\2"+
    "\3\0\u0149\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0\4\2"+
    "\2\0\103\2\45\0\20\2\20\0\125\2\14\0\u026c\2\2\0\21\2"+
    "\1\0\32\2\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2"+
    "\16\0\22\2\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2"+
    "\4\0\1\2\3\0\12\4\46\0\12\4\6\0\130\2\10\0\51\2"+
    "\1\0\1\2\5\0\106\2\12\0\35\2\51\0\12\4\36\2\2\0"+
    "\5\2\13\0\54\2\25\0\7\2\10\0\12\4\46\0\27\2\11\0"+
    "\65\2\53\0\12\4\6\0\12\4\15\0\1\2\135\0\57\2\21\0"+
    "\7\2\4\0\12\4\51\0\36\2\15\0\2\2\12\4\6\0\46\2"+
    "\32\0\44\2\34\0\12\4\3\0\3\2\12\4\44\2\153\0\4\2"+
    "\1\0\4\2\16\0\300\2\100\0\u0116\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\164\0\1\2\15\0\1\2\20\0\15\2\145\0\1\2"+
    "\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2"+
    "\5\0\5\2\4\0\1\2\64\0\2\2\u0a7b\0\57\2\1\0\57\2"+
    "\1\0\205\2\6\0\4\2\21\0\46\2\12\0\66\2\11\0\1\2"+
    "\20\0\27\2\11\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\120\0\1\2"+
    "\u01d5\0\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2"+
    "\1\0\132\2\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2"+
    "\65\0\20\2\u0200\0\u19b6\2\112\0\u51cc\2\64\0\u048d\2\103\0\56\2"+
    "\2\0\u010d\2\3\0\20\2\12\4\2\2\24\0\57\2\20\0\31\2"+
    "\10\0\106\2\61\0\11\2\2\0\147\2\2\0\4\2\1\0\2\2"+
    "\16\0\12\2\120\0\10\2\1\0\3\2\1\0\4\2\1\0\27\2"+
    "\35\0\64\2\16\0\62\2\34\0\12\4\30\0\6\2\3\0\1\2"+
    "\4\0\12\4\34\2\12\0\27\2\31\0\35\2\7\0\57\2\34\0"+
    "\1\2\12\4\46\0\51\2\27\0\3\2\1\0\10\2\4\0\12\4"+
    "\6\0\27\2\3\0\1\2\5\0\60\2\1\0\1\2\3\0\2\2"+
    "\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2\43\0\6\2"+
    "\2\0\6\2\2\0\6\2\11\0\7\2\1\0\7\2\221\0\43\2"+
    "\15\0\12\4\6\0\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u012e\2"+
    "\2\0\76\2\2\0\152\2\46\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\0\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2"+
    "\50\0\14\2\164\0\5\2\1\0\207\2\23\0\12\4\7\0\32\2"+
    "\6\0\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2"+
    "\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\2\7\1\1\1\3\1\10\1\11\1\12\1\13\1\14"+
    "\1\1\5\3\1\15\13\3\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\36\1\40"+
    "\1\36\1\37\2\41\3\37\1\42\1\37\1\43\1\44"+
    "\1\45\1\46\1\44\2\47\1\44\1\50\2\46\1\51"+
    "\1\52\1\53\1\44\1\54\2\44\1\55\1\56\1\0"+
    "\2\57\3\0\1\60\1\0\1\61\1\62\1\63\1\64"+
    "\1\65\1\0\1\66\1\0\1\3\1\67\1\70\4\0"+
    "\1\3\1\71\1\72\13\3\1\73\23\3\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\36\1\112\1\113\1\41"+
    "\3\0\1\114\1\0\2\46\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\56\2\0\3\123\16\60\1\62\1\124"+
    "\1\125\1\0\1\126\1\3\1\127\1\0\1\130\3\0"+
    "\3\3\1\131\14\3\1\132\5\3\1\133\15\3\1\134"+
    "\1\135\1\41\2\0\3\136\1\137\2\46\1\123\4\60"+
    "\1\140\16\60\1\0\2\124\1\126\1\3\2\0\1\141"+
    "\1\0\5\3\1\142\1\3\1\143\1\144\13\3\1\145"+
    "\1\146\10\3\1\147\1\150\3\3\1\151\1\136\1\46"+
    "\1\152\23\60\1\62\1\0\1\3\1\153\1\0\4\3"+
    "\1\154\4\3\1\155\1\156\3\3\1\157\2\3\1\160"+
    "\1\161\4\3\1\162\1\3\1\163\1\3\1\164\1\3"+
    "\1\165\1\166\5\60\1\167\3\60\1\170\7\60\1\171"+
    "\1\172\1\0\1\3\1\173\1\174\3\3\1\175\11\3"+
    "\1\176\1\3\1\177\1\200\1\201\5\60\1\202\1\60"+
    "\1\203\1\204\5\60\1\205\2\3\1\206\1\207\2\3"+
    "\1\210\1\211\1\3\1\212\1\213\1\214\1\215\1\3"+
    "\1\60\1\216\2\60\1\217\4\60\1\220\1\221\2\3"+
    "\1\222\1\223\1\224\1\225\1\226\1\227\5\60\1\3"+
    "\1\230\1\231\1\60\1\232\1\60\1\233\1\234\1\235"+
    "\1\236";

  private static int [] zzUnpackAction() {
    int [] result = new int[487];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u026d\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u026d"+
    "\0\u026d\0\u026d\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747"+
    "\0\u026d\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u026d\0\u026d\0\u026d\0\u026d"+
    "\0\u026d\0\u026d\0\u0a83\0\u026d\0\u0ac8\0\u0b0d\0\u026d\0\u0b52"+
    "\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u026d"+
    "\0\u0d7a\0\u026d\0\u0dbf\0\u0e04\0\u033c\0\u0381\0\u04da\0\u026d"+
    "\0\u05ee\0\u026d\0\u026d\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u026d\0\u0fe7\0\u102c\0\u026d\0\u026d\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u026d\0\u120f"+
    "\0\u033c\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u026d"+
    "\0\u026d\0\u1437\0\u147c\0\u026d\0\u14c1\0\u1506\0\u026d\0\u026d"+
    "\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u02f7\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u02f7\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u026d\0\u026d"+
    "\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d"+
    "\0\u026d\0\u1eff\0\u026d\0\u026d\0\u026d\0\u1f44\0\u026d\0\u1f89"+
    "\0\u0ed3\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u026d"+
    "\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u216c\0\u21b1"+
    "\0\u026d\0\u12de\0\u1299\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a"+
    "\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u2601\0\u147c\0\u2646\0\u268b\0\u26d0\0\u026d"+
    "\0\u2715\0\u026d\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3"+
    "\0\u02f7\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96"+
    "\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u02f7\0\u2c34\0\u2c79"+
    "\0\u2cbe\0\u2d03\0\u2d48\0\u02f7\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084"+
    "\0\u30c9\0\u02f7\0\u026d\0\u310e\0\u3153\0\u3198\0\u026d\0\u2013"+
    "\0\u1fce\0\u209d\0\u31dd\0\u3222\0\u216c\0\u3267\0\u32ac\0\u32f1"+
    "\0\u3336\0\u1323\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4"+
    "\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc"+
    "\0\u3741\0\u3786\0\u026d\0\u37cb\0\u3810\0\u3855\0\u389a\0\u026d"+
    "\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u02f7\0\u3a7d"+
    "\0\u02f7\0\u02f7\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b"+
    "\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u02f7\0\u02f7\0\u3db9"+
    "\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u02f7"+
    "\0\u02f7\0\u3fe1\0\u4026\0\u406b\0\u0dbf\0\u3153\0\u40b0\0\u0e8e"+
    "\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8"+
    "\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500"+
    "\0\u4545\0\u458a\0\u45cf\0\u026d\0\u4614\0\u4659\0\u469e\0\u46e3"+
    "\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u02f7\0\u483c\0\u4881\0\u48c6"+
    "\0\u490b\0\u02f7\0\u02f7\0\u4950\0\u4995\0\u49da\0\u02f7\0\u4a1f"+
    "\0\u4a64\0\u02f7\0\u02f7\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u02f7"+
    "\0\u4bbd\0\u02f7\0\u4c02\0\u02f7\0\u4c47\0\u0e8e\0\u1323\0\u4c8c"+
    "\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u1323\0\u4de5\0\u4e2a\0\u4e6f"+
    "\0\u1323\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052"+
    "\0\u1323\0\u5097\0\u50dc\0\u5121\0\u02f7\0\u02f7\0\u5166\0\u51ab"+
    "\0\u51f0\0\u02f7\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349\0\u538e"+
    "\0\u53d3\0\u5418\0\u545d\0\u02f7\0\u54a2\0\u02f7\0\u02f7\0\u1323"+
    "\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb\0\u1323\0\u5640\0\u1323"+
    "\0\u1323\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u026d\0\u57de"+
    "\0\u5823\0\u02f7\0\u5868\0\u58ad\0\u58f2\0\u02f7\0\u02f7\0\u5937"+
    "\0\u02f7\0\u02f7\0\u02f7\0\u02f7\0\u597c\0\u59c1\0\u1323\0\u5a06"+
    "\0\u5a4b\0\u1323\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u1323\0\u1323"+
    "\0\u5ba4\0\u5be9\0\u02f7\0\u02f7\0\u02f7\0\u02f7\0\u1323\0\u1323"+
    "\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87\0\u02f7\0\u1323"+
    "\0\u5dcc\0\u1323\0\u5e11\0\u1323\0\u02f7\0\u1323\0\u1323";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[487];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\2\14\1\15\1\12\1\13\1\14\1\16"+
    "\1\17\1\20\1\21\1\14\2\22\1\23\2\14\1\24"+
    "\1\25\1\14\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\14\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\14\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\14\1\53\1\14\1\54\1\14\1\13\2\14"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\13\5\75\1\76\1\75\1\77\17\75\1\100\55\75"+
    "\5\101\1\76\1\101\1\77\20\101\1\100\54\101\2\102"+
    "\2\103\10\102\1\103\3\102\2\103\1\102\2\103\6\102"+
    "\6\103\1\102\7\103\1\104\7\103\1\102\2\103\20\102"+
    "\1\0\1\102\1\13\2\14\1\105\1\102\1\13\1\14"+
    "\1\106\1\17\1\20\1\21\1\14\2\22\1\23\2\14"+
    "\1\107\1\25\1\14\1\26\1\27\1\30\1\31\1\110"+
    "\1\111\1\14\1\34\1\35\1\36\1\37\1\40\1\112"+
    "\1\42\1\43\1\44\1\14\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\14\1\53\1\14\1\54\1\14\1\13"+
    "\2\14\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\13\1\113\1\114\2\115\1\116\1\113\1\114"+
    "\5\113\1\115\2\117\1\120\2\115\1\113\2\115\1\113"+
    "\1\121\1\122\3\113\6\115\1\113\5\115\1\123\1\115"+
    "\1\124\7\115\1\114\2\115\2\113\1\125\1\126\3\113"+
    "\1\127\1\130\1\131\1\113\1\132\1\133\1\134\2\113"+
    "\1\114\5\135\1\136\1\135\1\0\17\135\1\137\62\135"+
    "\1\136\1\135\1\0\17\135\1\0\1\140\54\135\1\102"+
    "\1\13\2\14\1\105\1\102\1\13\1\14\1\106\1\17"+
    "\1\20\1\21\1\14\2\22\1\23\2\14\1\107\1\25"+
    "\1\14\1\26\1\27\1\30\1\31\1\32\1\111\1\14"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\14\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\14\1\53\1\14\1\54\1\14\1\13\2\14\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\13"+
    "\106\0\1\13\4\0\1\13\52\0\1\13\22\0\1\13"+
    "\2\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\17\14\1\0\2\14\25\0\1\141"+
    "\10\0\3\141\4\0\1\142\1\0\1\143\7\0\1\142"+
    "\50\0\2\144\3\0\1\144\1\0\1\145\2\0\1\144"+
    "\3\0\2\144\1\0\2\144\6\0\6\144\1\0\17\144"+
    "\1\0\2\144\33\0\1\146\1\147\60\0\1\150\104\0"+
    "\1\151\14\0\1\141\10\0\3\22\4\0\1\142\1\0"+
    "\1\143\7\0\1\142\52\0\1\141\10\0\1\141\2\152"+
    "\2\153\2\0\1\142\1\0\1\143\7\0\1\142\46\0"+
    "\12\154\1\155\72\154\2\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\2\14\1\156"+
    "\14\14\1\0\2\14\46\0\1\157\46\0\1\160\14\0"+
    "\1\143\10\0\3\143\6\0\1\161\111\0\1\162\1\163"+
    "\1\0\1\164\50\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\1\165\1\14\6\0\2\14\1\166\3\14\1\0"+
    "\5\14\1\167\11\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\170"+
    "\2\14\1\0\6\14\1\171\10\14\1\0\2\14\23\0"+
    "\3\14\2\0\1\14\4\0\4\14\1\172\1\14\1\0"+
    "\2\14\6\0\1\173\1\14\1\174\3\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\3\14\1\175\2\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\15\14\1\176\1\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\14\14\1\177\2\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\4\14\1\200\1\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\1\14\1\201\15\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\3\14\1\202\1\14\1\203\1\0"+
    "\16\14\1\204\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\5\14\1\205\1\0"+
    "\2\14\1\206\3\14\1\207\10\14\1\0\2\14\23\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\2\14\1\210\3\14\1\0\13\14\1\211\3\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\4\14\1\212\1\14\1\0\14\14\1\213"+
    "\1\14\1\214\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\4\14\1\215\1\14"+
    "\1\0\2\14\1\216\3\14\1\217\10\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\1\220\4\14\1\221\1\0\2\14\1\222\14\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\1\223\5\14\1\224"+
    "\1\225\7\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\2\14"+
    "\1\226\14\14\1\0\2\14\113\0\1\227\1\230\1\231"+
    "\103\0\1\232\1\233\104\0\1\234\104\0\1\235\2\0"+
    "\1\236\101\0\1\237\3\0\1\240\100\0\1\241\4\0"+
    "\1\242\77\0\1\243\104\0\1\244\10\0\5\75\1\0"+
    "\1\75\1\0\17\75\1\0\55\75\6\245\1\0\75\245"+
    "\3\0\2\246\10\0\1\246\3\0\2\246\1\0\2\246"+
    "\4\0\1\247\1\0\6\246\1\0\17\246\1\0\2\246"+
    "\21\0\5\101\1\0\1\101\1\0\20\101\1\0\54\101"+
    "\2\0\3\103\7\0\6\103\1\0\2\103\6\0\6\103"+
    "\1\0\17\103\1\0\2\103\23\0\3\103\7\0\6\103"+
    "\1\0\2\103\6\0\6\103\1\0\14\103\1\250\2\103"+
    "\1\0\2\103\22\0\1\114\4\0\1\114\52\0\1\114"+
    "\22\0\1\114\2\0\3\115\7\0\6\115\1\0\2\115"+
    "\6\0\6\115\1\0\17\115\1\0\2\115\25\0\1\251"+
    "\10\0\3\251\4\0\1\252\1\0\1\253\7\0\1\252"+
    "\52\0\1\251\10\0\3\117\4\0\1\252\1\0\1\253"+
    "\7\0\1\252\52\0\1\251\10\0\1\251\2\254\2\255"+
    "\2\0\1\252\1\0\1\253\7\0\1\252\52\0\1\253"+
    "\10\0\3\253\67\0\3\115\7\0\6\115\1\0\2\115"+
    "\6\0\6\115\1\0\2\115\1\256\14\115\1\0\2\115"+
    "\23\0\3\115\7\0\6\115\1\0\2\115\6\0\4\115"+
    "\1\257\1\115\1\0\17\115\1\0\2\115\115\0\1\260"+
    "\104\0\1\261\104\0\1\262\107\0\1\263\105\0\1\264"+
    "\100\0\1\265\10\0\5\135\1\0\1\135\1\0\17\135"+
    "\1\0\55\135\6\266\1\0\75\266\5\0\1\267\10\0"+
    "\3\267\5\0\1\270\44\0\1\270\12\0\4\271\1\272"+
    "\10\271\3\272\4\271\1\273\1\271\1\0\7\271\1\273"+
    "\46\271\2\0\3\144\2\0\1\144\4\0\6\144\1\0"+
    "\2\144\6\0\6\144\1\0\17\144\1\0\2\144\23\0"+
    "\2\144\3\0\1\144\4\0\1\144\3\0\2\144\1\0"+
    "\1\274\1\144\6\0\2\144\1\275\1\144\1\276\1\277"+
    "\1\0\1\144\1\300\1\301\1\302\1\303\1\304\2\144"+
    "\1\305\1\306\1\307\1\310\1\311\2\144\1\0\2\144"+
    "\21\0\6\146\1\0\75\146\1\0\13\312\1\313\71\312"+
    "\4\0\1\141\10\0\1\141\2\152\4\0\1\142\1\0"+
    "\1\143\7\0\1\142\62\0\4\314\4\0\1\314\11\0"+
    "\1\314\4\0\2\314\1\0\2\314\3\0\1\314\6\0"+
    "\1\314\22\0\5\155\1\315\4\155\1\316\72\155\2\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\11\14\1\317\5\14\1\0\2\14\47\0"+
    "\1\320\112\0\1\321\117\0\1\322\70\0\1\323\1\0"+
    "\1\324\1\0\1\325\47\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\10\14\1\326"+
    "\6\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\1\327\5\14\1\0\7\14"+
    "\1\330\7\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\1\331"+
    "\14\14\1\332\1\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\1\333\5\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\7\14"+
    "\1\334\7\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\13\14"+
    "\1\335\3\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\6\14"+
    "\1\336\10\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\7\14"+
    "\1\337\7\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\3\14\1\340\2\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\1\14\1\341\4\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\3\14\1\342\2\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\13\14"+
    "\1\343\3\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\5\14"+
    "\1\344\11\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\2\14\1\345\3\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\4\14\1\346\1\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\1\347\5\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\2\14\1\350\3\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\7\14\1\351"+
    "\7\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\1\14\1\352\4\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\6\14\1\353"+
    "\7\14\1\354\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\1\14\1\355\2\14"+
    "\1\356\1\14\1\0\17\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\10\14\1\357\6\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\1\14"+
    "\1\360\4\14\1\0\17\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\11\14\1\361\5\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\1\14\1\362\15\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\2\14\1\363\14\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\2\14"+
    "\1\364\3\14\1\0\17\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\7\14\1\365\3\14\1\366\3\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\1\14\1\367\4\14\1\0\17\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\10\14\1\370\6\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\2\14\1\371\14\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\4\14\1\372\1\14\1\0\17\14\1\0\2\14"+
    "\115\0\1\373\12\0\3\246\7\0\6\246\1\0\2\246"+
    "\6\0\6\246\1\0\17\246\1\0\2\246\23\0\3\103"+
    "\7\0\6\103\1\0\2\103\6\0\1\103\1\374\4\103"+
    "\1\0\17\103\1\0\2\103\25\0\1\375\10\0\3\375"+
    "\5\0\1\376\44\0\1\376\12\0\4\377\1\u0100\10\377"+
    "\3\u0100\4\377\1\u0101\1\377\1\0\7\377\1\u0101\46\377"+
    "\4\0\1\251\10\0\1\251\2\254\4\0\1\252\1\0"+
    "\1\253\7\0\1\252\62\0\4\u0102\4\0\1\u0102\11\0"+
    "\1\u0102\4\0\2\u0102\1\0\2\u0102\3\0\1\u0102\6\0"+
    "\1\u0102\24\0\3\115\7\0\6\115\1\0\2\115\6\0"+
    "\1\u0103\5\115\1\0\17\115\1\0\2\115\23\0\3\115"+
    "\7\0\6\115\1\0\2\115\6\0\6\115\1\0\6\115"+
    "\1\u0104\10\115\1\0\2\115\21\0\4\271\1\u0105\10\271"+
    "\3\u0105\6\271\1\0\56\271\4\0\1\267\10\0\3\267"+
    "\67\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\3\144\1\u0106\2\144\1\0\2\144\1\u0107\14\144"+
    "\1\0\2\144\23\0\3\144\2\0\1\144\4\0\6\144"+
    "\1\0\2\144\6\0\5\144\1\u0108\1\0\2\144\1\u0109"+
    "\10\144\1\u010a\3\144\1\0\2\144\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\2\144\6\0\3\144\1\u010b"+
    "\2\144\1\0\17\144\1\0\2\144\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\2\144\6\0\6\144\1\0"+
    "\15\144\1\u010c\1\144\1\0\2\144\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\2\144\6\0\1\144\1\u010d"+
    "\4\144\1\0\6\144\1\u010e\10\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\6\144\1\u010f\10\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\3\144\1\u0110\2\144\1\0\17\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\3\144\1\u0111\2\144\1\0\17\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\1\144\1\u0112\4\144\1\0\2\144\1\u0113\14\144\1\0"+
    "\2\144\23\0\3\144\2\0\1\144\4\0\6\144\1\0"+
    "\2\144\6\0\4\144\1\u0114\1\144\1\0\17\144\1\0"+
    "\2\144\23\0\3\144\2\0\1\144\4\0\6\144\1\0"+
    "\2\144\6\0\5\144\1\u0115\1\0\17\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\3\144\1\u0116\2\144\1\0\17\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\3\144\1\u0117\2\144\1\0\17\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\6\144\1\0\2\144\1\u0118\14\144\1\0\2\144"+
    "\21\0\13\312\1\u0119\71\312\12\u011a\1\u011b\1\313\71\u011a"+
    "\5\155\1\315\4\155\1\u011c\72\155\23\0\1\316\10\0"+
    "\1\316\13\0\1\316\3\0\2\316\31\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\4\14\1\u011d"+
    "\1\14\1\0\17\14\1\0\2\14\56\0\1\u011e\124\0"+
    "\1\u011f\75\0\1\u0120\75\0\1\u0121\47\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\1\u0122\4\14"+
    "\1\u0123\1\0\17\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\1\14\1\u0124"+
    "\4\14\1\0\17\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\u0125"+
    "\2\14\1\0\17\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\u0126"+
    "\2\14\1\0\17\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\1\u0127\5\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\3\14\1\u0128\2\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\3\14\1\u0129\2\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\1\u012a\1\14\6\0\6\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\6\14\1\u012b"+
    "\10\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\4\14\1\u012c\1\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\1\u012d\5\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\2\14\1\u012e\14\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\7\14\1\u012f\7\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\2\14\1\u0130\14\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\2\14\1\u0131\14\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\13\14\1\u0132\3\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\11\14\1\u0133\5\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\16\14\1\u0134\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\2\14\1\u0135\3\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\3\14\1\u0136\2\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\13\14\1\u0137\3\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\5\14\1\u0138\1\0\17\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\3\14\1\u0139\2\14\1\0\17\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\15\14\1\u013a\1\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\3\14\1\u013b\13\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\1\u013c\5\14\1\0\17\14\1\0\2\14\23\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\13\14\1\u013d\3\14\1\0\2\14\23\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\7\14\1\u013e\7\14\1\0\2\14\23\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\6\14\1\0\11\14\1\u013f\5\14\1\0\2\14\23\0"+
    "\3\14\2\0\1\14\4\0\6\14\1\0\2\14\6\0"+
    "\3\14\1\u0140\2\14\1\0\7\14\1\u0141\7\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\7\14\1\u0142\7\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\3\14\1\u0143\2\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\7\14\1\u0144\7\14\1\0"+
    "\2\14\23\0\3\103\7\0\6\103\1\0\2\103\6\0"+
    "\6\103\1\0\13\103\1\u0145\3\103\1\0\2\103\21\0"+
    "\4\377\1\u0146\10\377\3\u0146\6\377\1\0\56\377\4\0"+
    "\1\375\10\0\3\375\67\0\3\115\7\0\6\115\1\0"+
    "\2\115\6\0\6\115\1\0\13\115\1\u0147\3\115\1\0"+
    "\2\115\23\0\3\115\7\0\6\115\1\0\2\115\6\0"+
    "\3\115\1\u0148\2\115\1\0\17\115\1\0\2\115\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\7\144\1\u0149\7\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\11\144\1\u014a\5\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\4\144\1\u014b\12\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\7\144\1\u014c\7\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\17\144\1\0\1\144\1\u014d\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\3\144"+
    "\1\u014e\2\144\1\0\17\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\2\144"+
    "\1\u014f\3\144\1\0\7\144\1\u0150\7\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\1\144\1\u0151\4\144\1\0\17\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\6\144\1\0\7\144\1\u0152\7\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\3\144\1\u0153\2\144\1\0\17\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\6\144\1\0\1\144\1\u0154\15\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\2\144\1\u0155\3\144\1\0\17\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\6\144\1\0\3\144\1\u0156\13\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\5\144\1\u0157\1\0\17\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\4\144\1\u0158\1\144\1\0\17\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\7\144\1\u0159\7\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\7\144\1\u015a\7\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\11\144\1\u015b\5\144\1\0\2\144\21\0"+
    "\12\312\1\u015c\1\u0119\71\312\13\u011a\1\u015d\71\u011a\5\155"+
    "\1\315\4\155\1\316\10\155\1\u011c\10\155\1\u011c\13\155"+
    "\1\u011c\3\155\2\u011c\27\155\2\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\5\14\1\u015e\1\0"+
    "\17\14\1\0\2\14\57\0\1\146\104\0\1\u015f\106\0"+
    "\1\u0160\46\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\3\14\1\u0161\2\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\4\14\1\u0162\1\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\2\14\1\u0163\3\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\4\14\1\u0164\1\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\4\14\1\u0165\1\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\2\14\1\u0166\1\14\1\u0167\1\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\4\14\1\u0168\1\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\4\14\1\u0169\1\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\3\14\1\u016a\2\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\3\14\1\u016b"+
    "\13\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\4\14\1\u016c\1\14\1\0"+
    "\17\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\2\14\6\0\6\14\1\0\6\14\1\u016d"+
    "\10\14\1\0\2\14\23\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\1\u016e\1\14\6\0\6\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\3\14\1\u016f\2\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\7\14\1\u0170\7\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\10\14\1\u0171\6\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\12\14\1\u0172\4\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\1\u0173\16\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\4\14\1\u0174\12\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\2\14\1\u0175\14\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\2\14\1\u0176\14\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u0177\4\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\13\14\1\u0178\3\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u0179\4\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\14\14\1\u017a\2\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\11\14\1\u017b\5\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\4\14\1\u017c\1\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u017d\4\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\115\7\0\6\115\1\0\2\115\6\0"+
    "\3\115\1\u017e\2\115\1\0\17\115\1\0\2\115\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\2\144\1\u017f\14\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\4\144\1\u0180\1\144\1\0\17\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\3\144\1\u0181\2\144\1\0\17\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\1\144\1\u0182\4\144\1\0\17\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\6\144\1\u0183\10\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\4\144\1\u0184\1\144\1\0\17\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\4\144\1\u0185\12\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\1\u0186\1\144"+
    "\6\0\6\144\1\0\17\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\1\u0187"+
    "\5\144\1\0\17\144\1\0\2\144\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\2\144\6\0\5\144\1\u0188"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\10\144"+
    "\1\u0189\6\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\6\144"+
    "\1\u018a\10\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\2\144"+
    "\1\u018b\14\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\3\144\1\u018c\2\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\7\144"+
    "\1\u018d\7\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\3\144\1\u018e\2\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\7\144"+
    "\1\u018f\7\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\7\144"+
    "\1\u0190\7\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\3\144"+
    "\1\u0191\13\144\1\0\2\144\21\0\12\u011a\1\u011b\1\u015d"+
    "\71\u011a\2\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\17\14\1\u0192\2\14\55\0"+
    "\1\u0193\107\0\1\146\47\0\3\14\2\0\1\14\4\0"+
    "\6\14\1\0\1\u0194\1\14\6\0\6\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\7\14\1\u0195\7\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\3\14\1\u0196\2\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\5\14\1\u0197\11\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\4\14\1\u0198\12\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\2\14\1\u0199\3\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\2\14\1\u019a\3\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\1\14\1\u019b\4\14\1\0\17\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\6\14\1\0\2\14\1\u019c\14\14"+
    "\1\0\2\14\23\0\3\14\2\0\1\14\4\0\6\14"+
    "\1\0\2\14\6\0\1\u019d\5\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u019e\4\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\1\14\1\u019f\4\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\3\14\1\u01a0\2\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\3\14\1\u01a1\2\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\7\14\1\u01a2\7\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\12\14\1\u01a3\4\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\11\14\1\u01a4\5\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\2\14\1\u01a5\3\14\1\0\17\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\14\14\1\u01a6\2\14\1\0"+
    "\2\14\23\0\3\14\2\0\1\14\4\0\6\14\1\0"+
    "\2\14\6\0\6\14\1\0\11\14\1\u01a7\5\14\1\0"+
    "\2\14\23\0\3\144\2\0\1\144\4\0\6\144\1\0"+
    "\2\144\6\0\5\144\1\u01a8\1\0\17\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\6\144\1\0\1\144\1\u01a9\15\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\6\144\1\0\15\144\1\u01aa\1\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\1\144\1\u01ab\4\144\1\0\17\144\1\0\2\144"+
    "\23\0\3\144\2\0\1\144\4\0\6\144\1\0\2\144"+
    "\6\0\1\u01ac\5\144\1\0\17\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\2\144\1\u01ad\14\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\4\144\1\u01ae\12\144\1\0\2\144\23\0"+
    "\3\144\2\0\1\144\4\0\6\144\1\0\2\144\6\0"+
    "\6\144\1\0\17\144\1\0\1\u01af\1\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\6\144"+
    "\1\0\12\144\1\u01b0\4\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\1\u01b1"+
    "\5\144\1\0\17\144\1\0\2\144\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\1\144\1\u01b2\6\0\6\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\3\144\1\u01b3\2\144"+
    "\1\0\17\144\1\0\2\144\23\0\1\144\1\u01b4\1\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\6\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\3\144\1\u01b5\2\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\3\144\1\u01b6\2\144"+
    "\1\0\17\144\1\0\2\144\102\0\1\u0192\72\0\1\u01b7"+
    "\37\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\3\14\1\u01b8\2\14\1\0\17\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\2\14\1\u01b9\14\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\13\14\1\u01ba\3\14\1\0\2\14"+
    "\23\0\3\14\2\0\1\14\4\0\6\14\1\0\2\14"+
    "\6\0\6\14\1\0\17\14\1\u01bb\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\4\14\1\u01bc\12\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\11\14\1\u01bd\5\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\7\14\1\u01be\7\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\11\14\1\u01bf\5\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\5\14"+
    "\1\u01c0\1\0\17\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\4\14\1\u01c1\12\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\5\14\1\u01c2\11\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\u01c3"+
    "\2\14\1\0\17\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\3\14\1\u01c4"+
    "\2\14\1\0\17\14\1\0\2\14\23\0\3\14\2\0"+
    "\1\14\4\0\6\14\1\0\2\14\6\0\6\14\1\0"+
    "\6\14\1\u01c5\10\14\1\0\2\14\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\2\144\6\0\6\144\1\0"+
    "\6\144\1\u01c6\10\144\1\0\2\144\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\2\144\6\0\3\144\1\u01c7"+
    "\2\144\1\0\17\144\1\0\2\144\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\2\144\6\0\4\144\1\u01c8"+
    "\1\144\1\0\17\144\1\0\2\144\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\2\144\6\0\5\144\1\u01c9"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\10\144"+
    "\1\u01ca\6\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\6\144"+
    "\1\u01cb\10\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\2\144\1\u01cc\3\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\11\144"+
    "\1\u01cd\5\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\2\144"+
    "\1\u01ce\14\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\4\144\1\u01cf\1\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\4\144\1\u01d0\1\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\2\14\1\u01d1\3\14"+
    "\1\0\17\14\1\0\2\14\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\11\14"+
    "\1\u01d2\5\14\1\0\2\14\102\0\1\u01bb\25\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\3\14"+
    "\1\u01d3\2\14\1\0\17\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\7\14\1\u01d4\7\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\2\14"+
    "\1\u01d5\3\14\1\0\17\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\3\14"+
    "\1\u01d6\2\14\1\0\17\14\1\0\2\14\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\6\144"+
    "\1\0\12\144\1\u01d7\4\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\3\144"+
    "\1\u01d8\2\144\1\0\17\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\6\144"+
    "\1\0\2\144\1\u01d9\14\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\1\144"+
    "\1\u01da\4\144\1\0\17\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\6\144"+
    "\1\0\6\144\1\u01db\10\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\6\144"+
    "\1\0\7\144\1\u01dc\7\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\6\144"+
    "\1\0\10\144\1\u01dd\6\144\1\0\2\144\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\6\14"+
    "\1\0\7\14\1\u01de\7\14\1\0\2\14\23\0\3\14"+
    "\2\0\1\14\4\0\6\14\1\0\2\14\6\0\3\14"+
    "\1\u01df\2\14\1\0\17\14\1\0\2\14\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\6\144"+
    "\1\0\4\144\1\u01e0\12\144\1\0\2\144\23\0\3\144"+
    "\2\0\1\144\4\0\6\144\1\0\2\144\6\0\1\u01e1"+
    "\5\144\1\0\17\144\1\0\2\144\23\0\3\144\2\0"+
    "\1\144\4\0\6\144\1\0\1\u01e2\1\144\6\0\6\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\3\144\1\u01e3\2\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\1\144\1\u01e4\4\144"+
    "\1\0\17\144\1\0\2\144\23\0\3\14\2\0\1\14"+
    "\4\0\6\14\1\0\2\14\6\0\6\14\1\0\13\14"+
    "\1\u01e5\3\14\1\0\2\14\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\4\144"+
    "\1\u01e6\12\144\1\0\2\144\23\0\3\144\2\0\1\144"+
    "\4\0\6\144\1\0\2\144\6\0\6\144\1\0\4\144"+
    "\1\u01e7\12\144\1\0\2\144\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\4\1\1\11\10\1\3\11\6\1\1\11"+
    "\13\1\6\11\1\1\1\11\2\1\1\11\10\1\1\11"+
    "\1\1\1\11\5\1\1\11\1\1\2\11\6\1\1\11"+
    "\2\1\2\11\7\1\1\0\1\11\1\1\3\0\1\1"+
    "\1\0\2\1\2\11\1\1\1\0\1\11\1\0\1\1"+
    "\2\11\4\0\42\1\13\11\1\1\3\11\1\1\1\11"+
    "\1\1\3\0\1\1\1\0\2\1\7\11\2\0\1\11"+
    "\23\1\1\0\2\1\1\11\1\0\1\11\3\0\45\1"+
    "\1\11\1\1\2\0\1\11\31\1\1\0\1\1\1\11"+
    "\2\1\2\0\1\11\1\0\72\1\1\11\1\0\2\1"+
    "\1\0\62\1\1\0\43\1\1\11\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[487];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    static final HaxeDebugLogger LOG = HaxeDebugLogger.getLogger();
    static {      // Take this out when finished debugging.
      LOG.setLevel(org.apache.log4j.Level.DEBUG);
    }

    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    Project context; // Required for conditional compilation support.
    public HaxeConditionalCompilationLexerSupport ccsupport;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private String getStateName(int state) {
        if(state == SHORT_TEMPLATE_ENTRY) {
          return "SHORT_TEMPLATE_ENTRY";
        }
        if(state == LONG_TEMPLATE_ENTRY) {
          return "LONG_TEMPLATE_ENTRY";
        }
        if(state == QUO_STRING) {
          return "QUO_STRING";
        }
        if(state == APOS_STRING) {
          return "APOS_STRING";
        }
        if(state == COMPILER_CONDITIONAL) {
          return "COMPILER_CONDITIONAL";
        }
        if(state == CC_STRING) {
          return "CC_STRING";
        }
        if(state == CC_APOS_STRING) {
          return "CC_APOS_STRING";
        }
        if(state == CC_BLOCK) {
          return "CC_BLOCK";
        }
        return null;
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    /** Map output within conditional blocks to comments if the condition is false. */
    private IElementType emitToken(IElementType tokenType) {
        if (ccsupport.currentContextIsActive()) {
           return tokenType;
        } else {
            return ccsupport.mapToken(tokenType);
        }
    }

    /** Deal with compiler conditional block constructs (e.g. #if...#end). */
    private IElementType processConditional(IElementType type) {
        ccsupport.processConditional(yytext(), type);

        if (PPIF.equals(type)) {
            ccStart();
        } else if (PPEND.equals(type)) {
            ccEnd();
        } else if (zzLexicalState != CC_BLOCK) {
            // Maybe the #if is missing, but if we're not at the end, we want to be sure that we're
            // in the conditional state.
            LOG.debug("Unexpected lexical state. Missing starting #if?");
            ccStart();
        }

        if (PPIF.equals(type) || PPELSEIF.equals(type)) {
            conditionStart();
        }
        return type;
    }

    // These deal with the state of lexing the *condition* for compiler conditionals
    private void conditionStart() { pushState(COMPILER_CONDITIONAL); ccsupport.conditionStart(); }
    private boolean conditionIsComplete() { return ccsupport.conditionIsComplete(); }
    private IElementType conditionAppend(IElementType type) {
        ccsupport.conditionAppend(yytext(),type);
        if (ccsupport.conditionIsComplete()) {
            conditionEnd();
        }
        return PPEXPRESSION;
    }
    private void conditionEnd() {
        ccsupport.conditionEnd();
        popState();
    }

    // We use the CC_BLOCK state to tell the highlighters, etc. that their context
    // has to go back to the start of the conditional (even though that may be a ways).  Basically,
    // we need to keep the state as something other than YYINITIAL.
    private void ccStart() { pushState(CC_BLOCK); } // Until we know better
    private void ccEnd() {
        // When there is no #if, but there is an end, popping the state produces an EmptyStackException
        // and messes up further processing.
        if (zzLexicalState == CC_BLOCK) {
            popState();
        }
    }

    // There are two other constructors generated for us.  This is the only one that is actually used.
    public _HaxeLexer(Project context) {
      this((java.io.Reader)null);
      this.context = context;
      ccsupport = new HaxeConditionalCompilationLexerSupport(context);
    }



  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1706) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 84: 
          { return emitToken( DOC_COMMENT);
          }
        case 159: break;
        case 37: 
          { return conditionAppend(com.intellij.psi.TokenType.WHITE_SPACE);
          }
        case 160: break;
        case 95: 
          { return conditionAppend( LITHEX );
          }
        case 161: break;
        case 133: 
          { return processConditional(PPELSEIF);
          }
        case 162: break;
        case 33: 
          { popState(); return emitToken( ID);
          }
        case 163: break;
        case 104: 
          { return emitToken( KCAST);
          }
        case 164: break;
        case 56: 
          { return emitToken( OPLUS_ASSIGN);
          }
        case 165: break;
        case 108: 
          { return emitToken( KNEVER);
          }
        case 166: break;
        case 34: 
          { lBraceCount++; return emitToken( PLCURLY);
          }
        case 167: break;
        case 49: 
          { return emitToken( MSL_COMMENT);
          }
        case 168: break;
        case 151: 
          { return emitToken( KREQUIRE);
          }
        case 169: break;
        case 55: 
          { return emitToken( OPLUS_PLUS);
          }
        case 170: break;
        case 4: 
          { return emitToken( OCOLON);
          }
        case 171: break;
        case 24: 
          { return emitToken( OQUEST);
          }
        case 172: break;
        case 111: 
          { return emitToken( KFALSE );
          }
        case 173: break;
        case 66: 
          { return emitToken( OBIT_OR_ASSIGN);
          }
        case 174: break;
        case 64: 
          { return emitToken( OEQ);
          }
        case 175: break;
        case 3: 
          { return emitToken( ID);
          }
        case 176: break;
        case 8: 
          { return emitToken( OPLUS);
          }
        case 177: break;
        case 90: 
          { return emitToken( KFOR );
          }
        case 178: break;
        case 126: 
          { return emitToken( KPUBLIC);
          }
        case 179: break;
        case 127: 
          { return emitToken( KSWITCH );
          }
        case 180: break;
        case 51: 
          { return emitToken( OQUOTIENT_ASSIGN);
          }
        case 181: break;
        case 5: 
          { return emitToken( OQUOTIENT);
          }
        case 182: break;
        case 22: 
          { return emitToken( OASSIGN);
          }
        case 183: break;
        case 122: 
          { return emitToken( KMACRO2);
          }
        case 184: break;
        case 117: 
          { return conditionAppend( KFALSE );
          }
        case 185: break;
        case 46: 
          { return conditionAppend( REGULAR_STRING_PART );
          }
        case 186: break;
        case 156: 
          { return emitToken( KIMPLEMENTS);
          }
        case 187: break;
        case 157: 
          { return emitToken( KAUTOBUILD);
          }
        case 188: break;
        case 96: 
          { return emitToken( KNS);
          }
        case 189: break;
        case 110: 
          { return emitToken( KBREAK);
          }
        case 190: break;
        case 143: 
          { return emitToken( KBITMAP);
          }
        case 191: break;
        case 107: 
          { return processConditional(PPELSE);
          }
        case 192: break;
        case 142: 
          { return emitToken( KNATIVE);
          }
        case 193: break;
        case 16: 
          { return emitToken( PLPAREN);
          }
        case 194: break;
        case 85: 
          { return emitToken( LITHEX);
          }
        case 195: break;
        case 6: 
          { return emitToken( OMUL);
          }
        case 196: break;
        case 65: 
          { return emitToken( ONOT_EQ);
          }
        case 197: break;
        case 18: 
          { return emitToken( OSEMI);
          }
        case 198: break;
        case 109: 
          { return emitToken( KWHILE );
          }
        case 199: break;
        case 112: 
          { return emitToken( KUSING );
          }
        case 200: break;
        case 153: 
          { return emitToken( KOVERLOAD);
          }
        case 201: break;
        case 35: 
          { if (lBraceCount == 0) {
                                                popState();
                                                return emitToken( LONG_TEMPLATE_ENTRY_END);
                                              }
                                              lBraceCount--;
                                              return emitToken( PRCURLY);
          }
        case 202: break;
        case 81: 
          { return conditionAppend( OCOND_AND );
          }
        case 203: break;
        case 92: 
          { return emitToken( KVAR);
          }
        case 204: break;
        case 145: 
          { return emitToken( KSETTER);
          }
        case 205: break;
        case 71: 
          { return emitToken( OSHIFT_LEFT);
          }
        case 206: break;
        case 136: 
          { return emitToken( KDEFAULT);
          }
        case 207: break;
        case 118: 
          { return emitToken( KMETA);
          }
        case 208: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return emitToken( OCOMPLEMENT);
          }
        case 209: break;
        case 99: 
          { return emitToken( KELSE );
          }
        case 210: break;
        case 68: 
          { return emitToken( OBIT_AND_ASSIGN);
          }
        case 211: break;
        case 147: 
          { return emitToken( KABSTRACT);
          }
        case 212: break;
        case 106: 
          { return conditionAppend( KTRUE );
          }
        case 213: break;
        case 47: 
          { popState(); return conditionAppend( CLOSING_QUOTE );
          }
        case 214: break;
        case 116: 
          { return emitToken( KSUPER );
          }
        case 215: break;
        case 94: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return conditionAppend( LITFLOAT );
          }
        case 216: break;
        case 77: 
          { return conditionAppend( OGREATER_OR_EQUAL );
          }
        case 217: break;
        case 9: 
          { return emitToken( ODOT);
          }
        case 218: break;
        case 30: 
          { return emitToken( REGULAR_STRING_PART);
          }
        case 219: break;
        case 25: 
          { return emitToken( OBIT_OR);
          }
        case 220: break;
        case 21: 
          { return emitToken( OGREATER);
          }
        case 221: break;
        case 43: 
          { return conditionAppend( OGREATER );
          }
        case 222: break;
        case 60: 
          { return emitToken( OMINUS_MINUS);
          }
        case 223: break;
        case 137: 
          { return emitToken( KDYNAMIC);
          }
        case 224: break;
        case 13: 
          { return emitToken( PRCURLY);
          }
        case 225: break;
        case 28: 
          { return emitToken( OBIT_XOR);
          }
        case 226: break;
        case 138: 
          { return emitToken( KUNTYPED);
          }
        case 227: break;
        case 115: 
          { return emitToken( KCATCH);
          }
        case 228: break;
        case 36: 
          { LOG.debug("Bad termination of PP condition: \"" + yytext() + "\"");
                                            yypushback(1);
                                            conditionEnd();
                                            return PPBODY;
          }
        case 229: break;
        case 121: 
          { return emitToken( KHACK);
          }
        case 230: break;
        case 140: 
          { return emitToken( KPRIVATE);
          }
        case 231: break;
        case 125: 
          { return emitToken( KRETURN );
          }
        case 232: break;
        case 58: 
          { return emitToken( KIF );
          }
        case 233: break;
        case 86: 
          { return emitToken( REG_EXP);
          }
        case 234: break;
        case 75: 
          { pushState(LONG_TEMPLATE_ENTRY); return emitToken( LONG_TEMPLATE_ENTRY_START);
          }
        case 235: break;
        case 11: 
          { pushState(APOS_STRING); return emitToken( OPEN_QUOTE);
          }
        case 236: break;
        case 114: 
          { return emitToken( KCLASS);
          }
        case 237: break;
        case 20: 
          { return emitToken( OMINUS);
          }
        case 238: break;
        case 57: 
          { return emitToken( OIN);
          }
        case 239: break;
        case 76: 
          { return conditionAppend( LITOCT );
          }
        case 240: break;
        case 70: 
          { return emitToken( OLESS_OR_EQUAL);
          }
        case 241: break;
        case 128: 
          { return emitToken( KSTATIC);
          }
        case 242: break;
        case 97: 
          { return processConditional(PPEND);
          }
        case 243: break;
        case 79: 
          { return conditionAppend( ONOT_EQ );
          }
        case 244: break;
        case 150: 
          { return emitToken( KNODEBUG);
          }
        case 245: break;
        case 12: 
          { return emitToken( PLCURLY);
          }
        case 246: break;
        case 38: 
          { return conditionAppend( ID );
          }
        case 247: break;
        case 23: 
          { return emitToken( ONOT);
          }
        case 248: break;
        case 1: 
          { yybegin(YYINITIAL);
                                                                          return emitToken( com.intellij.psi.TokenType.BAD_CHARACTER );
          }
        case 249: break;
        case 82: 
          { return conditionAppend( OLESS_OR_EQUAL );
          }
        case 250: break;
        case 119: 
          { return emitToken( KBIND);
          }
        case 251: break;
        case 44: 
          { return conditionAppend( ONOT );
          }
        case 252: break;
        case 158: 
          { return emitToken( KPROTECTED);
          }
        case 253: break;
        case 144: 
          { return emitToken( KGETTER);
          }
        case 254: break;
        case 152: 
          { return emitToken( KINTERFACE);
          }
        case 255: break;
        case 93: 
          { return emitToken( OSHIFT_LEFT_ASSIGN);
          }
        case 256: break;
        case 15: 
          { return emitToken( PRBRACK);
          }
        case 257: break;
        case 63: 
          { return emitToken( OFAT_ARROW);
          }
        case 258: break;
        case 62: 
          { return emitToken( OMINUS_ASSIGN);
          }
        case 259: break;
        case 40: 
          { pushState(CC_STRING); return conditionAppend( OPEN_QUOTE );
          }
        case 260: break;
        case 42: 
          { return conditionAppend( PRPAREN );
          }
        case 261: break;
        case 124: 
          { return emitToken( KINLINE);
          }
        case 262: break;
        case 27: 
          { return emitToken( OLESS);
          }
        case 263: break;
        case 146: 
          { return emitToken( KOVERRIDE);
          }
        case 264: break;
        case 32: 
          { popState(); return emitToken( CLOSING_QUOTE);
          }
        case 265: break;
        case 74: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                                  yypushback(yylength() - 1);
                                                                  return emitToken( SHORT_TEMPLATE_ENTRY_START);
          }
        case 266: break;
        case 61: 
          { return emitToken( OARROW);
          }
        case 267: break;
        case 50: 
          { return emitToken( MML_COMMENT);
          }
        case 268: break;
        case 80: 
          { return conditionAppend( OCOND_OR );
          }
        case 269: break;
        case 83: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return emitToken( LITFLOAT);
          }
        case 270: break;
        case 135: 
          { return emitToken( KEXTERN);
          }
        case 271: break;
        case 41: 
          { return conditionAppend( PLPAREN );
          }
        case 272: break;
        case 103: 
          { return emitToken( KCASE);
          }
        case 273: break;
        case 88: 
          { return processConditional(PPIF);
          }
        case 274: break;
        case 132: 
          { return emitToken( KFINAL);
          }
        case 275: break;
        case 129: 
          { return emitToken( KMACRO);
          }
        case 276: break;
        case 139: 
          { return emitToken( KTYPEDEF);
          }
        case 277: break;
        case 73: 
          { return emitToken( OREMAINDER_ASSIGN);
          }
        case 278: break;
        case 149: 
          { return emitToken( KCONTINUE );
          }
        case 279: break;
        case 113: 
          { return emitToken( KTHROW );
          }
        case 280: break;
        case 130: 
          { return emitToken( KBUILD);
          }
        case 281: break;
        case 78: 
          { return conditionAppend( OEQ );
          }
        case 282: break;
        case 29: 
          { return emitToken( OREMAINDER);
          }
        case 283: break;
        case 67: 
          { return emitToken( OCOND_OR);
          }
        case 284: break;
        case 69: 
          { return emitToken( OCOND_AND);
          }
        case 285: break;
        case 123: 
          { return emitToken( KIMPORT );
          }
        case 286: break;
        case 102: 
          { return emitToken( KTHIS );
          }
        case 287: break;
        case 14: 
          { return emitToken( PLBRACK);
          }
        case 288: break;
        case 134: 
          { return emitToken( KEXTENDS);
          }
        case 289: break;
        case 59: 
          { return emitToken( KDO );
          }
        case 290: break;
        case 155: 
          { return emitToken( KCOREAPI);
          }
        case 291: break;
        case 26: 
          { return emitToken( OBIT_AND);
          }
        case 292: break;
        case 154: 
          { return emitToken( KFAKEENUM);
          }
        case 293: break;
        case 53: 
          { return emitToken( LITOCT);
          }
        case 294: break;
        case 148: 
          { return emitToken( KFUNCTION);
          }
        case 295: break;
        case 52: 
          { return emitToken( OMUL_ASSIGN);
          }
        case 296: break;
        case 10: 
          { pushState(QUO_STRING); return emitToken( OPEN_QUOTE);
          }
        case 297: break;
        case 72: 
          { return emitToken( OBIT_XOR_ASSIGN);
          }
        case 298: break;
        case 39: 
          { return conditionAppend( LITINT );
          }
        case 299: break;
        case 89: 
          { return emitToken( ONEW);
          }
        case 300: break;
        case 141: 
          { return emitToken( KPACKAGE);
          }
        case 301: break;
        case 100: 
          { return emitToken( KENUM);
          }
        case 302: break;
        case 48: 
          { return emitToken( MACRO_ID);
          }
        case 303: break;
        case 7: 
          { return emitToken( LITINT);
          }
        case 304: break;
        case 87: 
          { return emitToken( OTRIPLE_DOT);
          }
        case 305: break;
        case 91: 
          { return emitToken( KTRY);
          }
        case 306: break;
        case 45: 
          { return conditionAppend( OLESS );
          }
        case 307: break;
        case 101: 
          { return emitToken( KTRUE );
          }
        case 308: break;
        case 31: 
          { return emitToken( com.intellij.psi.TokenType.BAD_CHARACTER );
          }
        case 309: break;
        case 131: 
          { return emitToken( KDEBUG);
          }
        case 310: break;
        case 98: 
          { return emitToken( KNULL );
          }
        case 311: break;
        case 105: 
          { popState(); return emitToken( KTHIS);
          }
        case 312: break;
        case 120: 
          { return emitToken( KKEEP);
          }
        case 313: break;
        case 19: 
          { return emitToken( OCOMMA);
          }
        case 314: break;
        case 2: 
          { return emitToken( com.intellij.psi.TokenType.WHITE_SPACE);
          }
        case 315: break;
        case 17: 
          { return emitToken( PRPAREN);
          }
        case 316: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
